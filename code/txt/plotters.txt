The below code was written to plot the results from calculator.py within the testing phase. 
Didn't want to keep the clutter within the calculator file when I was writing other trhings, but they might be useful at a later date

'''
all of the below are just used for plotting - these will eventually be put into their own class, allowing stuff to be saved
in a dataframe etc. For now, The splurge
'''
'''
the below is just to get certain lists that can then be plotted later on
'''

time_list = []
position_list = []
for i in data:
    time_list.append(i[0])
    position_list.append(i[1])


'''
plot x against time to check the expected pattern of motion
'''
'''
fig, ax = plt.subplots()

fig.suptitle('x position against time')

ax.plot(time_list, np.transpose(position_list)[0])
ax.set(xlabel = 'time', ylabel = 'x position of ball')
plt.show()
'''

'''
animation! This needs some work due to the "zoom out" issue
'''
'''

fig = plt.figure()
ax = fig.add_subplot(111, autoscale_on = True) #the 111 is what defines the subplot - nrows, ncolums, and index 

line, = ax.plot([],[], 'o-')
time_template = 'time ={}s'
time_text = ax.text(0.05,0.9, '', transform=ax.transAxes)
def ani_init():
    line.set_data([], [])
    time_text.set_text('')
    return line, time_text
positions_x = np.transpose(position_list)[0]
positions_y = np.transpose(position_list)[1]
def animate(i):
    plot_x = [0,positions_x[i]]
    plot_y = [0,positions_y[i]]

    line.set_data(plot_x,plot_y)
    time_text.set_text(time_template.format(i*0.01))
    return line, time_text

ani = animation.FuncAnimation(fig, animate, np.arange(1, len(positions_x)),  interval=25, blit=True, init_func=ani_init)


plt.show()
'''

'''
plot x and y position - not sure of this 
'''
'''

fig, ax = plt.subplots()

fig.suptitle('x-y position of ball')

ax.plot(np.transpose(position_list)[0], np.transpose(position_list)[1])
ax.set(xlabel = 'x position of ball', ylabel = 'y position of ball')
plt.show()
'''

'''
plot x and y against time on seperate graphs against time 
'''
fig, ax = plt.subplots(ncols= 2, nrows= 1)

ax[0].set(xlabel = 'time', ylabel = 'x position', title = 'x-position against time')
ax[0].plot(time_list, np.transpose(position_list)[0], color = 'm')

ax[1].set(xlabel = 'time', ylabel = 'y position', title = 'y-position against time')
ax[1].plot(time_list, np.transpose(position_list)[1], color = 'r')


plt.show()
